# Clear workspace.
rm(list=ls(all=TRUE))
# Set data directory.
data_dir <- 'Data'
# Set directory for storing figures.
fig_dir <- 'Figures'
# Set directory for storing tables.
tab_dir <- 'Tables'
# Libraries to print tables of regression results.
library(xtable)
library(texreg)
# library sampleSelection to estimate models
# with sample selection.
library(sampleSelection)
##################################################
# Loading the Data
##################################################
car_col_names <- c('type', 'pauc', 'pret', 'mileage', 'make',
'year', 'damage', 'dealer', 'ror', 'cost')
in_file_name <- sprintf('%s/%s', data_dir, 'UsedCars.dat')
DF <- read.table(file = in_file_name,header = FALSE,
col.names = car_col_names)
# Inspect the contents.
print('Summary of car_sales Dataset:')
print(summary(DF))
str(DF)
DF$type <- as.factor(DF$type)
DF$make <- factor(DF$make)
DF$age <- 2020 - DF$year
DF$dealer <- as.factor(DF$dealer)
DF$damage <- as.factor(DF$damage)
str(DF)
print('Summarizing Numeric Variables')
print('Summary by type of Manufacture:')
##################################################
# Plot EDF in base R and output to figure.
print('Plotting ECDF.')
library(xtable)
library(lattice)
library(latticeExtra)
#################################################################
ecdf_ror <- ecdf(DF[,'ror'])
vals <- data.frame(r1=DF$ror,
r2=DF$pret,
r3=DF$pauc)
ecdfplot(~ r1 + r2 + r3, data=vals, auto.key=list(space='right'))
fig_file_name <- 'ecdf_prices.eps'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
pdf(out_file_name)
vals <- data.frame(r1=DF$ror,
r2=DF$pret,
r3=DF$pauc)
setwd("C:/Users/alibe/OneDrive/Bureau/UCF/Semester5/Capstone/final")
##################################################
# Loading the Data
##################################################
car_col_names <- c('type', 'pauc', 'pret', 'mileage', 'make',
'year', 'damage', 'dealer', 'ror', 'cost')
in_file_name <- sprintf('%s/%s', data_dir, 'UsedCars.dat')
DF <- read.table(file = in_file_name,header = FALSE,
col.names = car_col_names)
# Inspect the contents.
print('Summary of car_sales Dataset:')
print(summary(DF))
str(DF)
DF$type <- as.factor(DF$type)
DF$make <- factor(DF$make)
DF$age <- 2020 - DF$year
DF$dealer <- as.factor(DF$dealer)
DF$damage <- as.factor(DF$damage)
str(DF)
print('Summarizing Numeric Variables')
print('Summary by type of Manufacture:')
##################################################
# Plot EDF in base R and output to figure.
print('Plotting ECDF.')
library(xtable)
library(lattice)
library(latticeExtra)
#################################################################
ecdf_ror <- ecdf(DF[,'ror'])
vals <- data.frame(r1=DF$ror,
r2=DF$pret,
r3=DF$pauc)
ecdfplot(~ r1 + r2 + r3, data=vals, auto.key=list(space='right'))
fig_file_name <- 'ecdf_prices.eps'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
pdf(out_file_name)
plot(ecdf_price,
main = 'Empirical Cumulative Distribution Function of ROR ',
xlab = 'ror',
ylab = 'Empirical C.D.F.')
plot(ecdf_ror,
main = 'Empirical Cumulative Distribution Function of ROR ',
xlab = 'ror',
ylab = 'Empirical C.D.F.')
dev.off()
dev.off()
dev.off()
plot(ecdf_ror,
main = 'Empirical Cumulative Distribution Function of ROR ',
xlab = 'ror',
ylab = 'Empirical C.D.F.')
plot(ecdf_ror,
main = 'Empirical Cumulative Distribution Function of ROR ',
xlab = 'ror',
ylab = 'Empirical C.D.F.')
dev.off()
fig_file_name <- 'ecdf_ror.eps'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(ecdf_ror,
main = 'Empirical Cumulative Distribution Function of ror ',
xlab = 'ror',
ylab = 'Empirical C.D.F.')
dev.off()
##################################################
# Relative histogram of price.
print('Ploting relative histogram of ROR.')
fig_file_name <- 'hist_ror.eps'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
hist(DF[, 'ror'],
main = 'Relative Histogram of ROR',
xlab = 'pret',
probability = TRUE)
dev.off()
##################################################
# Kernel-smoothed pdf of the natural logarithm of price.
print('Plotting kernel-smoothed pdf')
print('of the ror.')
##################################################
# Kernel-smoothed pdf of the natural logarithm of price.
print('Plotting kernel-smoothed pdf')
print('of the ror.')
density_log_price <- density((DF[, 'ror']))
fig_file_name <- 'density_ror.eps'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
setEPS()
postscript(out_file_name)
plot(density_log_price,
main = 'Kernel-smoothed pdf of ROR',
xlab = 'Price')
dev.off()
dev.off()
plot(density_log_price,
main = 'Kernel-smoothed pdf of ROR',
xlab = 'Price')
#dealer, age, level of damge
# Add some categorical variables to scatterplots.
splom_var_list <- c('type', 'pauc', 'pret', 'mileage',
'damage', 'ror', 'cost','dealer', 'age' )
# fig_file_name <- 'slpom_with_cat.eps'
fig_file_name <- 'slpom_with_cat.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
splom(DF[, splom_var_list])
dev.off()
#cheking the relationship between mileage and age
library("tidyverse")
fig_file_name <- 'age_mileage_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(DF,nrow(DF)), aes(x =age, y =mileage, na.rm =TRUE)) +
geom_point(data = DF, aes(x =age, y =mileage, na.rm =TRUE))
dev.off()
#cheking the relationship between pret and age
fig_file_name <- 'pert_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(DF,nrow(DF)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(data = DF, aes(x =age, y =pret, na.rm =TRUE))
dev.off()
#cheking the relationship between pauc and age
fig_file_name <- 'pauc_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(DF,nrow(DF)), aes(x =age, y =pauc, na.rm =TRUE)) +
geom_point(data = DF, aes(x =age, y =pauc, na.rm =TRUE))
dev.off()
#####################################################################
#####################################################################
#Box_COx Transformation
library(MASS)
library(car)
library(EnvStats)
##################################################
# Kernel-smoothed pdf of fly reel price.
print('Plotting kernel-smoothed pdf')
#cheking the relationship between pret and age
fig_file_name <- 'pert_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(DF,nrow(DF)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(data = DF, aes(x =age, y =pret, na.rm =TRUE))
dev.off()
##################################################
# Kernel-smoothed pdf of the natural logarithm of price.
print('Plotting kernel-smoothed pdf')
print('of the natural logarithm of ror')
##################################################
DF$log_ror <- log(DF$ror)
density_log_ror <- density(DF[, 'log_ror'])
fig_file_name <- 'density_log_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_log_ror,
main = 'Kernel-Smoothed pdf of the Natural Log. of car Ror',
xlab = 'Logarithm of Ror',
col = 'blue', lwd = 3)
dev.off()
#--------------------------------------------------
# Compare Prices and Transformation for Normality
print(c('Calculating Q-Q Plots of Dependent Variable.'))
# Plot normal QQ plot for Fly Reel Prices.
fig_file_name <- 'qq_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(DF[, 'ror'],
main = 'Q-Q Plot of Fly Reel Prices') # ,
qqline(DF[, 'ror'],
col = 'blue', lwd = 3) # ,
dev.off()
# Plot normal QQ plot for the log of Fly Reel Prices.
fig_file_name <- 'qq_log_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(DF[, 'log_ror'],
main = 'Q-Q Plot of the Log. of car ror') # ,
qqline(DF[, 'log_ror'],
col = 'blue', lwd = 3) # ,
dev.off()
##################################################
# Calculating Box-Cox Transformation
# for Univariate Likelihood Function.
print(c('Calculating Box-Cox Transformation',
'for Univariate Likelihood Function.'))
# Plot normal QQ plot for Fly Reel Prices.
fig_file_name <- 'qq_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(DF[, 'ror'],
main = 'Q-Q Plot of ror') # ,
qqline(DF[, 'ror'],
col = 'blue', lwd = 3) # ,
dev.off()
# Plot normal QQ plot for the log of Fly Reel Prices.
fig_file_name <- 'qq_log_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(DF[, 'log_ror'],
main = 'Q-Q Plot of the Log. of car ror') # ,
qqline(DF[, 'log_ror'],
col = 'blue', lwd = 3) # ,
# Plot normal QQ plot for the log of Fly Reel Prices.
fig_file_name <- 'qq_log_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
qqnorm(DF[, 'log_ror'],
main = 'Q-Q Plot of the Log. of car ror') # ,
qqline(DF[, 'log_ror'],
col = 'blue', lwd = 3) # ,
dev.off()
##################################################
# Calculating Box-Cox Transformation
# for Univariate Likelihood Function.
print(c('Calculating Box-Cox Transformation',
'for Univariate Likelihood Function.'))
bt_mlg <- boxTidwell(formula =
ror ~ mileage,
other.x = ~
age +
make +
damage +
dealer  + type,
data = DF)
# The output is a test on the exponent.
print(bt_mlg)
# Print the output to a LaTeX file.
tab_file_name <- 'bt_mlg.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat("\\begin{verbatim}", file = out_file_name)
sink(out_file_name, append = TRUE)
print(bt_mlg)
sink()
cat("\\end{verbatim}", file = out_file_name, append = TRUE)
bt_age <- boxTidwell(formula =
ror ~ age,
other.x = ~
damage + squared_mileage +
# age +
dealer + mileage + type,
data = DF)
print(bt_age)
# Estimate a regression model.
lm_7 <- lm(data = DF,
formula = ror ~
squared_mileage +
make +
damage +
dealer + mileage + age + type )
##################################################
# Create a variable squared_mileage
# to investigate quadratic relationship of sale price to horsepower.
DF[, 'squared_mileage'] <- DF[, 'mileage']^2
str(DF)
# Estimate a regression model.
lm_7 <- lm(data = DF,
formula = ror ~
squared_mileage +
make +
damage +
dealer + mileage + age + type )
# Output the results to screen.
print(summary(lm_7))
bt_mlg <- boxTidwell(formula =
ror ~ mileage,
other.x = ~
age +
make +
damage +
dealer  + type,
data = DF)
# The output is a test on the exponent.
print(bt_mlg)
# Print the output to a LaTeX file.
tab_file_name <- 'bt_mlg.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat("\\begin{verbatim}", file = out_file_name)
sink(out_file_name, append = TRUE)
print(bt_mlg)
sink()
cat("\\end{verbatim}", file = out_file_name, append = TRUE)
bt_age <- boxTidwell(formula =
ror ~ age,
other.x = ~
damage + squared_mileage +
# age +
dealer + mileage + type,
data = DF)
print(bt_age)
# Print the output to a LaTeX file.
tab_file_name <- 'bt_age.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat("\\begin{verbatim}", file = out_file_name)
sink(out_file_name, append = TRUE)
print(bt_age)
sink()
cat("\\end{verbatim}", file = out_file_name, append = TRUE)
bt_cost <- boxTidwell(formula =
ror ~ cost,
other.x = ~
dealer  + age + type,#mileage
data = DF)
print(bt_cost)
# Print the output to a LaTeX file.
tab_file_name <- 'bt_eng.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat("\\begin{verbatim}", file = out_file_name)
sink(out_file_name, append = TRUE)
print(bt_cost)
sink()
cat("\\end{verbatim}", file = out_file_name, append = TRUE)
bt_full <- boxTidwell(formula =
ror ~ cost +
age +
mileage,
other.x = ~make +dealer  + type,
data = DF)
print(bt_full)
bt_full <- boxTidwell(formula =
ror ~
age +
mileage,
other.x = ~make +dealer  + type,
data = DF)
print(bt_full)
str(DF)
# Print the output to a LaTeX file.
tab_file_name <- 'bt_full.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
cat("\\begin{verbatim}", file = out_file_name)
sink(out_file_name, append = TRUE)
print(bt_full)
sink()
cat("\\end{verbatim}", file = out_file_name, append = TRUE)
