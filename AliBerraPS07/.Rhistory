setwd("~/GitHub/QMB6912S22/demo_07/FlyReel_Reg_Models")
# Set data directory.
data_dir <- 'Data'
# Set directory for storing figures.
fig_dir <- 'Figures'
# Set directory for storing tables.
tab_dir <- 'Tables'
# Libraries to print tables of regression results.
library(xtable)
library(texreg)
# Set parameters for flyreel dataset.
in_file_name <- sprintf('%s/%s', data_dir, 'FlyReels.csv')
fly_col_names <- c('Name', 'Brand', 'Weight', 'Diameter', 'Width',
'Price', 'Sealed', 'Country', 'Machined')
# Load data.
flyreels <- read.csv(file = in_file_name, header = FALSE,
col.names = fly_col_names)
# Initial inspection.
print('Summary of FlyReels Dataset:')
print(summary(flyreels))
# Set categorical variables as factors.
cat_var_list <- colnames(flyreels)[lapply(flyreels, class) == "character"]
# Load data.
flyreels <- read.csv(file = in_file_name, header = FALSE,
col.names = fly_col_names)
# Set parameters for flyreel dataset.
in_file_name <- sprintf('%s/%s', data_dir, 'FlyReels.csv')
fly_col_names <- c('Name', 'Brand', 'Weight', 'Diameter', 'Width',
'Price', 'Sealed', 'Country', 'Machined')
# Load data.
flyreels <- read.csv(file = in_file_name, header = FALSE,
col.names = fly_col_names)
setwd("~/GitHub/QMB6912S22/demo_07/FlyReel_Reg_Models")
setwd("~/GitHub/QMB6912S22/demo_07/FlyReel_Reg_Models")
setwd("C:/Users/alibe/OneDrive/Bureau/A07")
# Set parameters for flyreel dataset.
in_file_name <- sprintf('%s/%s', data_dir, 'FlyReels.csv')
fly_col_names <- c('Name', 'Brand', 'Weight', 'Diameter', 'Width',
'Price', 'Sealed', 'Country', 'Machined')
# Load data.
flyreels <- read.csv(file = in_file_name, header = FALSE,
col.names = fly_col_names)
# Initial inspection.
print('Summary of FlyReels Dataset:')
print(summary(flyreels))
# Set categorical variables as factors.
cat_var_list <- colnames(flyreels)[lapply(flyreels, class) == "character"]
for (var_name in cat_var_list) {
flyreels[, var_name] <- as.factor(flyreels[, var_name])
}
# Initial inspection.
print('FlyReels Dataset with Categorical Factors:')
print(summary(flyreels))
# Create a density variable.
colnames(flyreels)
flyreels[, 'Volume'] <- pi * (flyreels[, 'Diameter']/2)^2 * flyreels[, 'Width']
flyreels[, 'Density'] <- flyreels[, 'Weight'] / flyreels[, 'Volume']
# Create logarithm of dependent variable.
flyreels[, 'log_Price'] <- log(flyreels[, 'Price'])
# Replace Country Indicator with made_in_USA Indicator.
table(flyreels[, 'Country'], useNA = 'ifany')
flyreels[, 'made_in_USA'] <- flyreels[, 'Country'] == 'USA'
# Check:
table(flyreels[, 'Country'],
flyreels[, 'made_in_USA'], useNA = 'ifany')
# Kernel-smoothed pdf of the (un-transformed) price.
density_price <- density(flyreels[, 'Price'])
fig_file_name <- 'density_prices.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_price,
main = 'Kernel-Smoothed pdf of Fly Reel Prices',
xlab = 'Price',
col = 'blue',
lwd = 3)
dev.off()
# Kernel-smoothed pdf of the natural logarithm of price.
density_log_price <- density(flyreels[, 'log_Price'])
fig_file_name <- 'density_log_prices.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_log_price,
main = 'Kernel-Smoothed pdf of the Natural Log. of Fly Reel Prices',
xlab = 'Logarithm of Price',
col = 'blue',
lwd = 3)
dev.off()
# Box-Cox transformation.
Lambda_Price <- function(price, lambda) {
if (lambda == 0) {
return(log(price))
} else {
return((price^lambda - 1)/lambda)
}
}
# Create the likelihood function.
log_like_uni <- function(price, lambda) {
n <- length(price)
lambda_price <- Lambda_Price(price, lambda)
mu_0_lambda <- mean(lambda_price)
sigma_2_lambda <- sum((lambda_price - mu_0_lambda)^2)/n
like <- - n/2*log(2*pi*sigma_2_lambda)
like <- like - 1/2/sigma_2_lambda*sum((lambda_price - mu_0_lambda)^2)
like <- like + (lambda - 1)*sum(log(price))
return(like)
}
# Calculate values of the log-likelihood function.
lambda_grid <- seq(-1, 2.5, by = 0.001)
like_grid <- 0*lambda_grid
for (lambda_num in 1:length(lambda_grid)) {
like_grid[lambda_num] <- log_like_uni(price = flyreels[, 'Price'],
lambda = lambda_grid[lambda_num])
}
# Find the MLE, the unrestricted estimate.
lambda_hat <- lambda_grid[which.max(like_grid)]
like_MLE <- max(like_grid)
# Generate new dependent variable with results from Problem Set 6.
flyreels[, 'Trans_Price'] <- Lambda_Price(price = flyreels[, 'Price'],
lambda = lambda_hat)
# Box-Cox transformation.
Lambda_Price <- function(price, lambda) {
if (lambda == 0) {
return(log(price))
} else {
return((price^lambda - 1)/lambda)
}
}
# Create the likelihood function.
log_like_uni <- function(price, lambda) {
n <- length(price)
lambda_price <- Lambda_Price(price, lambda)
mu_0_lambda <- mean(lambda_price)
sigma_2_lambda <- sum((lambda_price - mu_0_lambda)^2)/n
like <- - n/2*log(2*pi*sigma_2_lambda)
like <- like - 1/2/sigma_2_lambda*sum((lambda_price - mu_0_lambda)^2)
like <- like + (lambda - 1)*sum(log(price))
return(like)
}
# Calculate values of the log-likelihood function.
lambda_grid <- seq(-1, 2.5, by = 0.001)
like_grid <- 0*lambda_grid
for (lambda_num in 1:length(lambda_grid)) {
like_grid[lambda_num] <- log_like_uni(price = flyreels[, 'Price'],
lambda = lambda_grid[lambda_num])
}
# Find the MLE, the unrestricted estimate.
lambda_hat <- lambda_grid[which.max(like_grid)]
like_MLE <- max(like_grid)
# Generate new dependent variable with results from Problem Set 6.
flyreels[, 'Trans_Price'] <- Lambda_Price(price = flyreels[, 'Price'],
lambda = lambda_hat)
# Kernel-smoothed pdf of the Box-Cox Transformation of price.
density_trans_price <- density(flyreels[, 'Trans_Price'])
fig_file_name <- 'density_trans_prices.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_trans_price,
main = 'Kernel-Smoothed pdf of the Box-Cox Transformation of Fly Reel Prices',
xlab = 'Logarithm of Price',
col = 'blue',
lwd = 3)
dev.off()
var_list <- c('Width', 'Diameter', 'Density',
'Sealed', 'Machined', 'made_in_USA')
target_var <- 'Price'
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_1 <- lm(data = flyreels, formula = lm_fmla)
print(summary(lm_model_1))
target_var <- 'log_Price'
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_2 <- lm(data = flyreels, formula = lm_fmla)
print(summary(lm_model_2))
target_var <- 'Trans_Price'
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_3 <- lm(data = flyreels, formula = lm_fmla)
print(summary(lm_model_3))
tab_file_name <- 'reg_by_dep_var.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
texreg(l = list(lm_model_1,
lm_model_2,
lm_model_3),
file = out_file_name,
label = 'tab:reg_by_dep_var',
caption = "Regression Models with Different Dependent Variables")
# Set target variable as the log transformation
# for remaining analysis.
target_var <- 'log_Price'
# New variable list without made_in_USA indicator
# since it is redundant in separate samples.
var_list <- c('Width', 'Diameter', 'Density',
'Sealed', 'Machined')
# Consider relationships of variables with
# country of manufacture.
table(flyreels[, 'Machined'],
flyreels[, 'made_in_USA'], useNA = 'ifany')
# All American reels are machined.
table(flyreels[, 'Sealed'],
flyreels[, 'made_in_USA'], useNA = 'ifany')
# New variable list without made_in_USA indicator
# since it is redundant in separate samples,
# but Machined is included for reels made in asia.
var_list <- c('Width', 'Diameter', 'Density',
'Sealed')
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_4 <- lm(data = flyreels[flyreels[, 'made_in_USA'] == TRUE, ],
formula = lm_fmla)
print(summary(lm_model_4))
# Above variable list without made_in_USA indicator
# since it is redundant in separate samples,
# but Machined is included for reels made in Asia.
var_list <- c('Width', 'Diameter', 'Density',
'Sealed', 'Machined')
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_5 <- lm(data = flyreels[flyreels[, 'made_in_USA'] == FALSE, ],
formula = lm_fmla)
print(summary(lm_model_5))
tab_file_name <- 'reg_by_country.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
texreg(l = list(lm_model_4,
lm_model_5),
file = out_file_name,
label = 'tab:reg_by_country',
caption = "Regression Models by Country of Manufacture")
##################################################
#
# Test for separate coefficients by country of manufacture
#   An example of joint hypothesis testing.
print("Test for separate coefficients by country of manufacture")
#
# The unconstrained RSS is calculated from the models
# estimated separately by country of manufacture:
RSS_unconstrained <- sum(lm_model_4$residuals^2) +
sum(lm_model_5$residuals^2)
print("RSS_unconstrained:")
print(RSS_unconstrained)
#
# The constrained RSS is calculated from the model
# that includes only the made_in_USA indicator:
RSS_constrained <- sum(lm_model_2$residuals^2)
print("RSS_constrained:")
print(RSS_constrained)
num_obs <- nrow(flyreels)
num_vars <- 2*6
# A test of eight restrictions
# (one for each variable minus the interaction).
num_restr <- 6 - 1
F_stat <- (RSS_constrained - RSS_unconstrained)/num_restr /
RSS_unconstrained*(num_obs - num_vars - 1)
print("F-statistic:")
print(F_stat)
# Calculate critical values.
F_critical_1 <- qf(p = 0.01,
df1 = num_restr, df2 = (num_obs - num_vars - 1),
lower.tail = FALSE)
F_critical_5 <- qf(p = 0.05,
df1 = num_restr, df2 = (num_obs - num_vars - 1),
lower.tail = FALSE)
F_critical_10 <- qf(p = 0.10,
df1 = num_restr, df2 = (num_obs - num_vars - 1),
lower.tail = FALSE)
print("Critical value of F-statistic:")
print("at the 1% level")
print(F_critical_1)
print("at the 5% level")
print(F_critical_5)
print("at the 10% level")
print(F_critical_10)
# Specify list of variables with interactions.
var_list <- c('Width', 'Diameter', 'Density',
'Sealed', 'Machined', 'made_in_USA',
'made_in_USA*Sealed')
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_6 <- lm(data = flyreels, formula = lm_fmla)
print(summary(lm_model_6))
# Specify list of variables with interactions.
var_list <- c('Width', 'Diameter', 'Density',
'Sealed', 'Machined', 'made_in_USA',
'made_in_USA*Density')
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_7 <- lm(data = flyreels, formula = lm_fmla)
print(summary(lm_model_7))
# Specify list of variables with interactions.
var_list <- c('Width', 'Diameter', 'Density',
'Sealed', 'Machined', 'made_in_USA',
'made_in_USA*Sealed', 'made_in_USA*Density')
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_8 <- lm(data = flyreels, formula = lm_fmla)
print(summary(lm_model_8))
tab_file_name <- 'reg_interactions.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
texreg(l = list(lm_model_6,
lm_model_7,
lm_model_8),
file = out_file_name,
label = 'tab:reg_interactions',
caption = "Regression Models with Interaction Terms by Country of Manufacture")
# Since all variables are significant in this model and it
library(xtable)
library(texreg)
setwd("C:/Users/alibe/OneDrive/Bureau/UCF/Semester5/Capstone/Assignment/Assignment_07")
# Set parameters for flyreel dataset.
in_file_name <- sprintf('%s/%s', data_dir, "UsedTrucks.dat")
Truck_col_names <- c('type', 'pauc', 'pret', 'mileage', 'make',
'year', 'damage', 'dealer', 'ror', 'cost')
# Load data.
Truck <- read.table(file = in_file_name, header = FALSE,
col.names = Truck_col_names)
# Initial inspection.
print("Summary of UsedTrucks.dat dataset:")
print(summary(Truck))
# Set categorical variables as factors.
cat_var_list <- colnames(Truck)[lapply(Truck, class) == "character"]
for (var_name in cat_var_list) {
Truck[, var_name] <- as.factor(Truck[, var_name])
}
# Initial inspection.
print('Truck Dataset with Categorical Factors:')
print(summary(Truck))
# Create a density variable.
colnames(Truck)
flyreels[, 'Volume'] <- pi * (flyreels[, 'Diameter']/2)^2 * flyreels[, 'Width']
flyreels[, 'Density'] <- flyreels[, 'Weight'] / flyreels[, 'Volume']
# Create logarithm of dependent variable.
Truck[, 'log_ror'] <- log(Truck[, 'ror'])
##################################################
# Kernel-smoothed pdf of fly reel price.
print('Plotting kernel-smoothed pdf')
print('of fly reel ror')
density_ror <- density(Truck[, 'ror'])
fig_file_name <- 'density_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_ror,
main = 'Kernel-Smoothed pdf of Truck ror',
xlab = 'ror',
col = 'blue', lwd = 3)
dev.off()
##################################################
# Kernel-smoothed pdf of the natural logarithm of price.
print('Plotting kernel-smoothed pdf')
print('of the natural logarithm of ror')
density_log_ror <- density(Truck[, 'log_ror'])
fig_file_name <- 'density_log_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_log_ror,
main = 'Kernel-Smoothed pdf of the Natural Log. of Truck Ror',
xlab = 'Logarithm of Ror',
col = 'blue', lwd = 3)
dev.off()
#--------------------------------------------------
# Compare Prices and Transformation for Normality
print(c('Calculating Q-Q Plots of Dependent Variable.'))
# Plot normal QQ plot for Fly Reel Prices.
fig_file_name <- 'qq_ror.pdf'
# Box-Cox transformation.
Lambda_ror <- function(ror, lambda) {
if (lambda == 0) {
return(log(ror))
} else {
return((ror^lambda - 1)/lambda)
}
}
log_like_uni <- function(ror, lambda) {
n <- length(ror)
lambda_ror <- Lambda_ror(ror, lambda)
mu_0_lambda <- mean(lambda_ror)
sigma_2_lambda <- sum((lambda_ror - mu_0_lambda)^2)/n
like <- - n/2*log(2*pi*sigma_2_lambda)
like <- like - 1/2/sigma_2_lambda*sum((lambda_ror - mu_0_lambda)^2)
like <- like + (lambda - 1)*sum(log(ror))
return(like)
}
# Calculate values of the log-likelihood function.
lambda_grid <- seq(-1, 2.5, by = 0.001)
like_grid <- 0*lambda_grid
for (lambda_num in 1:length(lambda_grid)) {
like_grid[lambda_num] <- log_like_uni(ror = Truck[, 'ror'],
lambda = lambda_grid[lambda_num])
}
# Find the MLE, the unrestricted estimate.
lambda_hat <- lambda_grid[which.max(like_grid)]
like_MLE <- max(like_grid)
# Generate new dependent variable with results from Problem Set 6.
Truck[, 'Trans_Price'] <- Lambda_ror(ror = Truck[, 'ror'],
lambda = lambda_hat)
# Generate new dependent variable with results from Problem Set 6.
Truck[, 'Trans_ror'] <- Lambda_ror(ror = Truck[, 'ror'],
lambda = lambda_hat)
# Kernel-smoothed pdf of the Box-Cox Transformation of price.
density_trans_ror <- density(Truck[, 'Trans_ror'])
fig_file_name <- 'density_trans_ror.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
plot(density_trans_ror,
main = 'Kernel-Smoothed pdf of the Box-Cox Transformation of Fly Reel Prices',
xlab = 'Logarithm of Price',
col = 'blue',
lwd = 3)
dev.off()
var_list <- c('type', 'pauc', 'pret')
target_var <- 'ror'
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_1 <- lm(data = Truck, formula = lm_fmla)
print(summary(lm_model_1))
# Regression on Logarithm of ror
target_var <- 'log_ror'
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_2 <- lm(data = Truck, formula = lm_fmla)
print(summary(lm_model_2))
target_var <- 'Trans_ror'
lm_fmla <- as.formula(sprintf('%s ~ %s',
target_var,
paste(var_list, collapse = ' + ')))
lm_model_3 <- lm(data = Truck, formula = lm_fmla)
print(summary(lm_model_3))
tab_file_name <- 'reg_by_dep_var.tex'
out_file_name <- sprintf('%s/%s', tab_dir, tab_file_name)
texreg(l = list(lm_model_1,
lm_model_2,
lm_model_3),
file = out_file_name,
label = 'tab:reg_by_dep_var',
caption = "Regression Models with Different Dependent Variables")
# Set target variable as the log transformation
# for remaining analysis.
target_var <- 'log_ror'
num_obs <- nrow(Truck)
num_vars <- 2*6
# A test of eight restrictions
# (one for each variable minus the interaction).
num_restr <- 6 - 1
