setwd("C:/Users/alibe/OneDrive/Bureau/UCF/Semester5/Capstone/week5/demo_05/FlyReel_Data_Vis")
# Clear workspace.
rm(list=ls(all=TRUE))
# Set data directory.
data_dir <- 'Data'
# Set directory for storing figures.
fig_dir <- 'Figures'
# Library for smoothing density estimates.
library(sm)
# lattice library to create matrices of scatterplots
library(lattice)
# Set parameters for flyreel dataset.
in_file_name <- sprintf('%s/%s', data_dir, 'FlyReels.csv')
fly_col_names <- c('Name', 'Brand', 'Weight', 'Diameter', 'Width',
'Price', 'Sealed', 'Country', 'Machined')
# Load data.
flyreels <- read.csv(file = in_file_name, header = FALSE,
col.names = fly_col_names)
# Initial inspection.
print('Summary of FlyReels Dataset:')
print(summary(flyreels))
# Set categorical variables as factors.
cat_var_list <- colnames(flyreels)[lapply(flyreels, class) == "character"]
for (var_name in cat_var_list) {
flyreels[, var_name] <- as.factor(flyreels[, var_name])
}
# Initial inspection.
print('FlyReels Dataset with Categorical Factors:')
print(summary(flyreels))
# Create a density variable.
colnames(flyreels)
flyreels[, 'Volume'] <- pi * (flyreels[, 'Diameter']/2)^2 * flyreels[, 'Width']
flyreels[, 'Density'] <- flyreels[, 'Weight'] / flyreels[, 'Volume']
# Generate a new variable log_Price.
flyreels[, 'log_Price'] <- log(flyreels[, 'Price'])
##################################################
# Relative histogram and density of Price.
print('Plotting histogram and density of log_Price.')
# First plot a histogram with the default options.
fig_file_name <- 'hist_dens_log_price.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# For an eps file, as before:
# setEPS()
# postscript(out_file_name)
# This produces a pdf instead:
pdf(out_file_name)
hist(flyreels[, 'log_Price'],
main = 'Histogram and Density of Log. Fly Reel Prices',
xlab = 'Price',
col = 'red',
probability = TRUE)
rug(flyreels[, 'log_Price'])
lines(density(flyreels[, 'log_Price']),
col = 'blue',
lwd = 3)
dev.off()
##################################################
# Relative histogram and density of Price.
print('Plotting figures by Country of Manufacture.')
# Investigate the value of fly reels made in America.
table(flyreels[, 'Country'], useNA = 'ifany')
# The densities could be plotted separately.
plot(density(flyreels[flyreels[, 'Country'] == 'USA', 'log_Price']),
col = 'blue',
lwd = 3,
xlim = c(2, 8))
lines(density(flyreels[flyreels[, 'Country'] == 'China', 'log_Price']),
col = 'red',
lwd = 3)
lines(density(flyreels[flyreels[, 'Country'] == 'Korea', 'log_Price']),
col = 'darkgreen',
lwd = 3)
# Now plot them together with the sm package.
# It appears as though it plots them in order of the values
# of the Country indicator.
fig_file_name <- 'dens_by_country.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
pdf(out_file_name)
sm.density.compare(flyreels[, 'log_Price'],
flyreels[, 'Country'],
xlab = "Log. of Price",
lwd = 3,
col = c('red','darkgreen', 'blue'))
title(main = 'Log. of Price by Country of Manufacture')
legend('topright', c('USA', 'China', 'Korea'),
fill = c('blue', 'red','darkgreen'),
cex = 0.75)
dev.off()
##################################################
# Generating Scatterplot Matrices.
print('Generating Scatterplot Matrices.')
# Create scatterplots of numeric variables.
splom_var_list <- c('Price', 'Width', 'Diameter', 'Density')
# fig_file_name <- 'slpom_num_only.eps'
fig_file_name <- 'slpom_num_only.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
splom(flyreels[, splom_var_list])
dev.off()
# Add some categorical variables to scatterplots.
splom_var_list <- c('Price', 'Width', 'Diameter', 'Density',
'Sealed', 'Machined')
# fig_file_name <- 'slpom_with_cat.eps'
fig_file_name <- 'slpom_with_cat.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
splom(flyreels[, splom_var_list])
dev.off()
# Create new categorical variable combining sealed and machined.
table(flyreels[, c('Sealed', 'Machined')], useNA = 'ifany')
flyreels[, 'Seal_Mach'] <- factor(sprintf('%s_%s',
substr(flyreels[, 'Sealed'], 1, 1),
substr(flyreels[, 'Machined'], 1, 1)))
table(flyreels[, c('Seal_Mach', 'Sealed')], useNA = 'ifany')
table(flyreels[, c('Seal_Mach', 'Machined')], useNA = 'ifany')
# Revise list of variables for 2-dimensional factor.
splom_var_list <- c('Price', 'Width', 'Diameter', 'Density',
'Seal_Mach')
# Plot in scatterplot matrix.
# fig_file_name <- 'slpom_with_sealed_mach.eps'
fig_file_name <- 'slpom_with_sealed_mach.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
splom(flyreels[, splom_var_list])
dev.off()
##################################################
# Generating Scatterplot Matrices
# Colored by Country of Manufacture.
print(c('Generating Scatterplot Matrices',
'Colored by Country of Manufacture.'))
# Color by country of origin.
# fig_file_name <- 'slpom_by_country.eps'
fig_file_name <- 'slpom_by_country.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
super.sym <- trellis.par.get("superpose.symbol")
splom(~flyreels[, splom_var_list],
groups = Country,
data = flyreels,
panel = panel.superpose,
cex = 0.5,
varname.cex = 0.75,
axis.text.cex = 0.1,
axis.text.col = 'white',
key = list(text = list(levels(flyreels[, 'Country'])),
title = "Three Countries of Origin",
columns = 3,
points = list(pch = super.sym$pch[1:3],
col = super.sym$col[1:3])
))
dev.off()
setwd("C:/Users/alibe/OneDrive/Bureau/UCF/Semester5/Capstone/Assignment/Assignment_05")
# Clear workspace.
rm(list=ls(all=TRUE))
# Set data directory.
data_dir <- 'Data'
# Set directory for storing figures.
fig_dir <- 'Figures'
#install.packages('xtable')
library(xtable)
# Set parameters for flyreel dataset.
in_file_name <- sprintf('%s/%s', data_dir, "UsedTrucks.dat")
Truck_col_names <- c('type', 'pauc', 'pret', 'mileage', 'make',
'year', 'damage', 'dealer', 'ror', 'cost')
# Load data.
Truck <- read.table(file = in_file_name, header = FALSE,
col.names = Truck_col_names)
# Initial inspection.
print("Summary of UsedTrucks.dat dataset:")
print(summary(Truck))
print('Summarizing Numeric Variables')
print('Summary by type of Manufacture:')
age <- Truck[,2020-year]
age <- Truck[,2020-(Truck$yea)r]
age <- Truck[,2020-(Truck$yea)]
age <- Truck[,2020-(Truck$year)]
age <- Truck[,c(2020-(Truck$year))]
age$Truck <- Truck[,c(2020-(Truck$year))]
age <- Truck[,]
Truck
age$Truck <- Truck[,]
Truck
age
Truck$age <- 2020 - Truck$year
Truck
# Create scatterplots of numeric variables.
splom_var_list <- c('type', 'pauc', 'pret', 'mileage','damage','ror','cost')
# fig_file_name <- 'slpom_num_only.eps'
fig_file_name <- 'slpom_num_only.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
splom(flyreels[, splom_var_list])
splom(Truck[, splom_var_list])
dev.off()
dev.off()
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
splom(Truck[, splom_var_list])
dev.off()
# Create scatterplots of numeric variables.
splom_var_list <- c('type', 'pauc', 'pret', 'mileage'
)
# fig_file_name <- 'slpom_num_only.eps'
fig_file_name <- 'slpom_num_only.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
splom(Truck[, splom_var_list])
dev.off()
# Create scatterplots of numeric variables.
splom_var_list <- c('type', 'pauc', 'pret', 'mileage',
'damage', 'ror', 'cost' )
Truck
#dealer, age, level of damge
# Add some categorical variables to scatterplots.
splom_var_list <- c('type', 'pauc', 'pret', 'mileage',
'damage', 'ror', 'cost','dealer', 'age' )
# fig_file_name <- 'slpom_with_cat.eps'
fig_file_name <- 'slpom_with_cat.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
splom(Truck[, splom_var_list])
dev.off()
Truck
#cheking the relationship between price and age
library("ggplot")
#cheking the relationship between price and age
library("tidyverse")
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "curve", x = 50000, y = 207000, xend = 25000, yend = 230000, curvature = 0.25,
arrow = arrow(length = unit(3, "mm")))+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')+
annotate(geom='text', x=50000, y=200000, label='Weird Outlier!', size=6, color='navyblue')+
theme
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "curve", x = 50000, y = 207000, xend = 25000, yend = 230000, curvature = 0.25,
arrow = arrow(length = unit(3, "mm")))+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')+
annotate(geom='text', x=50000, y=200000, label='Weird Outlier!', size=6, color='navyblue')
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "curve", x = 50000, y = 207000, xend = 25000, yend = 230000, curvature = 0.25,
arrow = arrow(length = unit(3, "mm")))+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')+
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "curve", x = 50000, y = 207000, xend = 25000, yend = 230000, curvature = 0.25,
arrow = arrow(length = unit(3, "mm")))+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "curve", x = 50000, y = 207000, xend = 25000, yend = 230000, curvature = 0.25,
arrow = arrow(length = unit(3, "mm")))+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =prauc, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pauc, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')
Truck
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =mileage, na.rm =TRUE)) +
geom_point(color='#f00000')+
labs(title='age vs price', subtitle = '!')+
annotate(geom = "segment", x = 0, xend = 200000, y = 0, yend = 200000, color='blue')
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =mileage, na.rm =TRUE))
?ggplot
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =mileage, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =age, y =mileage, na.rm =TRUE))
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =pret, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =age, y =pret, na.rm =TRUE))
ggplot(head(Truck,nrow(Truck)), aes(x =pret, y =age, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =pret, y =age, na.rm =TRUE))
ggplot(head(Truck,nrow(Truck)), aes(x =pauc, y =age, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =pauc, y =age, na.rm =TRUE))
price_age <- ggplot(head(Truck,nrow(Truck)), aes(x =age, y =mileage, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =age, y =mileage, na.rm =TRUE))
fig_file_name <- 'price_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
price_age <- ggplot(head(Truck,nrow(Truck)), aes(x =age, y =mileage, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =age, y =mileage, na.rm =TRUE))
fig_file_name <- 'price_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
price_age <- ggplot(head(Truck,nrow(Truck)), aes(x =age, y =mileage, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =age, y =mileage, na.rm =TRUE))
dev.off()
dev.off()
fig_file_name <- 'price_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =mileage, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =age, y =mileage, na.rm =TRUE))
dev.off()
dev.off()
dev.off()
fig_file_name <- 'age_mileage_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(Truck,nrow(Truck)), aes(x =age, y =mileage, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =age, y =mileage, na.rm =TRUE))
dev.off()
#cheking the relationship between pret and age
fig_file_name <- 'pert_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(Truck,nrow(Truck)), aes(x =pret, y =age, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =pret, y =age, na.rm =TRUE))
#cheking the relationship between pret and age
fig_file_name <- 'pert_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(Truck,nrow(Truck)), aes(x =pret, y =age, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =pret, y =age, na.rm =TRUE))
dev.off()
#cheking the relationship between pauc and age
fig_file_name <- 'pauc_age_plot.pdf'
out_file_name <- sprintf('%s/%s', fig_dir, fig_file_name)
# setEPS()
# postscript(out_file_name)
pdf(out_file_name)
ggplot(head(Truck,nrow(Truck)), aes(x =pauc, y =age, na.rm =TRUE)) +
geom_point(data = Truck, aes(x =pauc, y =age, na.rm =TRUE))
dev.off()
dev.off()
